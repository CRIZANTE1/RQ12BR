import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
from datetime import datetime
import uuid
from operations.calculadora_escada import CalculadoraEscada, GerenciadorHistorico
from operations.avaliador_escada import avaliar_escada_existente
from operations.calculadora_nova_escada import calcular_nova_escada
from operations.referencias_visuais import mostrar_referencias_visuais
from operations.historico_avaliacoes import mostrar_historico_avaliacoes
from auth.auth_utils import (
    get_effective_user_plan, 
    has_pro_features, 
    has_ai_features,
    get_user_info
)

# Inicializar calculadora e gerenciador de hist√≥rico
calculadora = CalculadoraEscada()
gerenciador_historico = GerenciadorHistorico()

def front():
    """Fun√ß√£o principal para a interface do usu√°rio"""
    st.set_page_config(
        page_title="RQ12BR - Avaliador de Escadas NR-12",
        page_icon="ü™ú",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    st.title("RQ12BR - Avaliador de Escadas NR-12")
    st.markdown("### Ferramenta para avalia√ß√£o de conformidade de escadas industriais")

    # Obter informa√ß√µes do usu√°rio e plano
    user_info = get_user_info()
    plano_atual = get_effective_user_plan()
    
    # Exibir informa√ß√µes do plano na sidebar
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä Seu Plano")
    st.sidebar.info(f"**{plano_atual.replace('_', ' ').title()}**")
    
    # Recursos dispon√≠veis por plano
    if plano_atual == 'basico':
        st.sidebar.markdown("""
        ‚úÖ Avaliar at√© 5 escadas/m√™s
        ‚ùå Calcular novas escadas
        ‚ùå An√°lise com IA
        """)
    elif plano_atual in ['pro', 'premium_ia']:
        st.sidebar.markdown("""
        ‚úÖ Avalia√ß√µes ilimitadas
        ‚úÖ Calcular novas escadas
        ‚úÖ Relat√≥rios em PDF
        """)
        if plano_atual == 'premium_ia':
            st.sidebar.markdown("‚úÖ An√°lise com IA")

    # Menu lateral
    opcoes_disponiveis = ["Calculadora de Escadas", "Refer√™ncias Visuais", "Hist√≥rico de Avalia√ß√µes"]
    
    opcao = st.sidebar.selectbox(
        "Selecione uma op√ß√£o:",
        opcoes_disponiveis
    )

    if opcao == "Calculadora de Escadas":
        mostrar_calculadora()
    elif opcao == "Refer√™ncias Visuais":
        mostrar_referencias_visuais()
    elif opcao == "Hist√≥rico de Avalia√ß√µes":
        mostrar_historico_avaliacoes()


def mostrar_calculadora():
    """Exibe a calculadora de escadas com controle de acesso"""
    st.header("Calculadora de Escadas")
    
    plano_atual = get_effective_user_plan()
    
    # Verificar limite de avalia√ß√µes para plano b√°sico
    if plano_atual == 'basico':
        # Contar avalia√ß√µes do m√™s atual
        if 'historico_avaliacoes' in st.session_state:
            from datetime import datetime
            mes_atual = datetime.now().strftime("%m/%Y")
            avaliacoes_mes = [
                a for a in st.session_state.historico_avaliacoes 
                if mes_atual in a.get('data', '')
            ]
            
            if len(avaliacoes_mes) >= 5:
                st.error("üö´ Voc√™ atingiu o limite de 5 avalia√ß√µes mensais do plano b√°sico.")
                st.info("Upgrade para o plano Pro para avalia√ß√µes ilimitadas!")
                return
            else:
                st.info(f"üìä Avalia√ß√µes este m√™s: {len(avaliacoes_mes)}/5")
    
    # Tabs para os modos da calculadora
    if plano_atual == 'basico':
        modo = "Avaliar Escada Existente"
        st.info("üí° O modo 'Calcular Nova Escada' est√° dispon√≠vel apenas nos planos Pro e Premium.")
    else:
        modo = st.radio(
            "Selecione o modo:",
            ["Avaliar Escada Existente", "Calcular Nova Escada"],
            horizontal=True
        )
    
    if modo == "Avaliar Escada Existente":
        avaliar_escada_existente(calculadora, gerenciador_historico)
    elif modo == "Calcular Nova Escada":
        if has_pro_features():
            calcular_nova_escada(calculadora, gerenciador_historico)
        else:
            st.warning("üîí Este recurso est√° dispon√≠vel apenas nos planos Pro e Premium.")
            st.info("Entre em contato para fazer upgrade!")


def mostrar_referencias_visuais():
    """Exibe refer√™ncias visuais para escadas industriais"""
    st.header("Refer√™ncias Visuais para Escadas Industriais")
    
    # Criar abas para diferentes tipos de refer√™ncias
    tabs = st.tabs(["Dimens√µes B√°sicas", "Guarda-corpo", "Plataformas", "Exemplos"])
    
    with tabs[0]:
        st.subheader("Dimens√µes B√°sicas de Escadas")
        
        # Criar colunas para organizar o conte√∫do
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### Par√¢metros Principais
            - **Altura do degrau (h)**: 150mm a 200mm (ideal: 180mm)
            - **Profundidade do degrau (p)**: M√≠nimo 250mm (ideal: 280mm)
            - **F√≥rmula de Blondel**: 2h + p = 630mm a 640mm
            - **Largura m√≠nima**: 800mm
            - **Inclina√ß√£o m√°xima**: 38¬∞
            """)
            
            st.markdown("""
            ### Requisitos NR-12
            - Degraus com superf√≠cie antiderrapante
            - Sem sali√™ncias ou rebarbas
            - Resist√™ncia para suportar cargas m√≥veis
            - Fixa√ß√£o segura na estrutura
            """)
        
        with col2:
            # Imagem ilustrativa das dimens√µes b√°sicas
            st.image("https://www.metalica.com.br/wp-content/uploads/2019/05/escada-marinheiro-dimensoes.jpg", 
                    caption="Dimens√µes b√°sicas de uma escada industrial", 
                    use_container_width=True)
    
    with tabs[1]:
        st.subheader("Guarda-corpo e Prote√ß√µes")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### Requisitos do Guarda-corpo
            - **Altura m√≠nima**: 1100mm
            - **Travess√£o intermedi√°rio**: a 700mm do piso
            - **Rodap√©**: 200mm de altura
            - **V√£os**: N√£o devem permitir a passagem de uma esfera de 110mm
            - **Resist√™ncia**: Suportar esfor√ßos de 150 kgf/m
            """)
        
        with col2:
            # Imagem ilustrativa de guarda-corpo
            st.image("https://www.ciser.com.br/wp-content/uploads/2021/01/guarda-corpo-nr12.jpg", 
                    caption="Exemplo de guarda-corpo conforme NR-12", 
                    use_container_width=True)
    
    with tabs[2]:
        st.subheader("Plataformas de Descanso")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### Requisitos para Plataformas
            - **Quando usar**: Escadas com altura superior a 3000mm
            - **Posicionamento**: A cada 3000mm de altura
            - **Dimens√µes m√≠nimas**: 800mm x 800mm
            - **Prote√ß√£o**: Guarda-corpo em todo o per√≠metro
            - **Piso**: Antiderrapante e resistente
            """)
        
        with col2:
            # Imagem ilustrativa de plataforma
            st.image("https://www.escadasnr12.com.br/wp-content/uploads/2019/08/plataforma-descanso-escada.jpg", 
                    caption="Plataforma de descanso em escada industrial", 
                    use_container_width=True)
    
    with tabs[3]:
        st.subheader("Exemplos de Escadas Conformes")
        
        # Galeria de exemplos
        col1, col2 = st.columns(2)
        
        with col1:
            st.image("https://www.metalurgicasc.com.br/wp-content/uploads/2021/03/escada-industrial-nr12.jpg", 
                    caption="Escada industrial com guarda-corpo", 
                    use_container_width=True)
            
            st.image("https://www.escadasnr12.com.br/wp-content/uploads/2019/08/escada-marinheiro-nr12.jpg", 
                    caption="Escada tipo marinheiro com gaiola de prote√ß√£o", 
                    use_container_width=True)
        
        with col2:
            st.image("https://www.metalica.com.br/wp-content/uploads/2019/05/escada-industrial-plataforma.jpg", 
                    caption="Escada com plataforma intermedi√°ria", 
                    use_container_width=True)
            
            st.image("https://www.ciser.com.br/wp-content/uploads/2021/01/escada-industrial-nr12-exemplo.jpg", 
                    caption="Escada industrial com degraus antiderrapantes", 
                    use_container_width=True)
    
    # Adicionar refer√™ncias normativas em formato ABNT
    st.markdown("---")
    st.subheader("Refer√™ncias Normativas")
    st.markdown("""
    - BRASIL. Minist√©rio do Trabalho e Emprego. **NR-12 - Seguran√ßa no Trabalho em M√°quinas e Equipamentos**. Bras√≠lia: MTE, 2019.
    
    - ASSOCIA√á√ÉO BRASILEIRA DE NORMAS T√âCNICAS. **ABNT NBR ISO 14122-3:2023**: Seguran√ßa de m√°quinas ‚Äî Meios de acesso permanentes √†s m√°quinas ‚Äî Parte 3: Escadas, escadas de degraus e guarda-corpos. Rio de Janeiro: ABNT, 2023.
    """)


def mostrar_historico_avaliacoes():
    """Exibe o hist√≥rico de avalia√ß√µes salvas"""
    st.header("Hist√≥rico de Avalia√ß√µes")
    
    # Criar diret√≥rios se n√£o existirem
    gerenciador_historico.criar_diretorios()
    
    # Carregar hist√≥rico do JSON se n√£o estiver na sess√£o
    if 'historico_avaliacoes' not in st.session_state:
        historico_json = gerenciador_historico.carregar_historico_json()
        st.session_state.historico_avaliacoes = historico_json
    
    # Exibir hist√≥rico existente
    if not st.session_state.historico_avaliacoes:
        st.info("Nenhuma avalia√ß√£o salva no hist√≥rico. Realize avalia√ß√µes na calculadora e salve-as para visualizar aqui.")
    else:
        # Mostrar lista de avalia√ß√µes salvas em formato de tabela com imagens
        st.subheader("Avalia√ß√µes Salvas")
        
        # Criar colunas para cada avalia√ß√£o
        num_avaliacoes = len(st.session_state.historico_avaliacoes)
        colunas_por_linha = 3
        
        # Dividir em linhas
        for i in range(0, num_avaliacoes, colunas_por_linha):
            cols = st.columns(colunas_por_linha)
            
            # Preencher cada coluna com uma avalia√ß√£o
            for j in range(colunas_por_linha):
                idx = i + j
                if idx < num_avaliacoes:
                    avaliacao = st.session_state.historico_avaliacoes[idx]
                    
                    with cols[j]:
                        st.markdown(f"**ID:** {avaliacao['id']}")
                        st.markdown(f"**Local:** {avaliacao.get('local', 'N√£o informado')}")
                        st.markdown(f"**Data:** {avaliacao.get('data', 'N√£o informada')}")
                        
                        # Exibir foto se existir
                        foto_path = avaliacao.get('foto_path')
                        if foto_path and os.path.exists(foto_path):
                            st.image(foto_path, caption="Foto da escada", width=200)
                        else:
                            st.info("Sem foto")
                        
                        # Calcular conformidade
                        itens_ok = sum(1 for status in avaliacao.get('status_itens', []) if status == '‚úÖ')
                        total_itens = len(avaliacao.get('status_itens', []))
                        if total_itens > 0:
                            conformidade = f"{(itens_ok/total_itens)*100:.1f}%"
                        else:
                            conformidade = "N/A"
                        
                        st.markdown(f"**Conformidade:** {conformidade}")
                        
                        # Bot√£o para visualizar detalhes
                        if st.button(f"Ver Detalhes #{idx+1}", key=f"btn_detalhes_{idx}"):
                            st.session_state.avaliacao_selecionada = idx
                        
                        # Bot√£o para excluir avalia√ß√£o
                        if st.button(f"Excluir Avalia√ß√£o #{idx+1}", key=f"btn_excluir_{idx}"):
                            st.session_state.historico_avaliacoes = gerenciador_historico.excluir_avaliacao(
                                st.session_state.historico_avaliacoes, idx)
                            st.success(f"Avalia√ß√£o ID {avaliacao['id']} exclu√≠da com sucesso!")
                            # Remover a sele√ß√£o se a avalia√ß√£o exclu√≠da era a selecionada
                            if 'avaliacao_selecionada' in st.session_state and st.session_state.avaliacao_selecionada == idx:
                                del st.session_state.avaliacao_selecionada
                            st.rerun()

    # Exibir detalhes da avalia√ß√£o selecionada
    if 'avaliacao_selecionada' in st.session_state and st.session_state.avaliacao_selecionada is not None:
        idx = st.session_state.avaliacao_selecionada
        if isinstance(idx, int) and 0 <= idx < len(st.session_state.historico_avaliacoes):
            avaliacao = st.session_state.historico_avaliacoes[idx]
            st.subheader(f"Detalhes da Avalia√ß√£o ID: {avaliacao['id']}")
            
            # Informa√ß√µes b√°sicas
            st.markdown(f"**Local:** {avaliacao.get('local', 'N√£o informado')}")
            st.markdown(f"**Data:** {avaliacao.get('data', 'N√£o informada')}")
            st.markdown(f"**Altura Total:** {avaliacao.get('altura_total', 'N√£o informado')} mm")
            
            # Criar colunas para gr√°fico e foto lado a lado
            col_grafico, col_foto = st.columns(2)
            
            with col_grafico:
                st.subheader("Gr√°fico da Escada")
                grafico_path = avaliacao.get('grafico_path')
                if grafico_path and os.path.exists(grafico_path):
                    st.image(grafico_path, caption="Gr√°fico da Escada", use_container_width=True)
                else:
                    st.info("Sem gr√°fico dispon√≠vel")
            
            with col_foto:
                st.subheader("Foto da Escada")
                foto_path = avaliacao.get('foto_path')
                if foto_path and os.path.exists(foto_path):
                    st.image(foto_path, caption="Foto da escada", use_container_width=True)
                else:
                    st.info("Sem foto dispon√≠vel")
            
            # Tabela de medidas abaixo das imagens
            st.subheader("Tabela de Medidas e Conformidade")
            medidas = avaliacao.get('medidas', [])
            valores = avaliacao.get('valores', [])
            status_itens = avaliacao.get('status_itens', [])
            recomendacoes = avaliacao.get('recomendacoes', ['-' for _ in status_itens])
            df_detalhes = pd.DataFrame({
                'Medida': medidas,
                'Valor': valores,
                'Status': status_itens,
                'Recomenda√ß√£o de Ajuste': recomendacoes
            })
            st.dataframe(df_detalhes, hide_index=True)